//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UserInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActions"",
    ""maps"": [
        {
            ""name"": ""EditingCurve"",
            ""id"": ""0e2c86ca-e4d2-4e68-ae37-585e185c5136"",
            ""actions"": [
                {
                    ""name"": ""AddMarker"",
                    ""type"": ""Button"",
                    ""id"": ""157ea672-0392-414a-a909-6d240c1b966f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveMarker"",
                    ""type"": ""Button"",
                    ""id"": ""1a0896fa-029d-46cb-87a8-0614f7aef2a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98364513-fa90-4997-94e5-a6400cca232c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f92301ec-1a6b-4c3b-ad41-f7dfb43d4bad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // EditingCurve
        m_EditingCurve = asset.FindActionMap("EditingCurve", throwIfNotFound: true);
        m_EditingCurve_AddMarker = m_EditingCurve.FindAction("AddMarker", throwIfNotFound: true);
        m_EditingCurve_MoveMarker = m_EditingCurve.FindAction("MoveMarker", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EditingCurve
    private readonly InputActionMap m_EditingCurve;
    private List<IEditingCurveActions> m_EditingCurveActionsCallbackInterfaces = new List<IEditingCurveActions>();
    private readonly InputAction m_EditingCurve_AddMarker;
    private readonly InputAction m_EditingCurve_MoveMarker;
    public struct EditingCurveActions
    {
        private @UserInputActions m_Wrapper;
        public EditingCurveActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddMarker => m_Wrapper.m_EditingCurve_AddMarker;
        public InputAction @MoveMarker => m_Wrapper.m_EditingCurve_MoveMarker;
        public InputActionMap Get() { return m_Wrapper.m_EditingCurve; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditingCurveActions set) { return set.Get(); }
        public void AddCallbacks(IEditingCurveActions instance)
        {
            if (instance == null || m_Wrapper.m_EditingCurveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditingCurveActionsCallbackInterfaces.Add(instance);
            @AddMarker.started += instance.OnAddMarker;
            @AddMarker.performed += instance.OnAddMarker;
            @AddMarker.canceled += instance.OnAddMarker;
            @MoveMarker.started += instance.OnMoveMarker;
            @MoveMarker.performed += instance.OnMoveMarker;
            @MoveMarker.canceled += instance.OnMoveMarker;
        }

        private void UnregisterCallbacks(IEditingCurveActions instance)
        {
            @AddMarker.started -= instance.OnAddMarker;
            @AddMarker.performed -= instance.OnAddMarker;
            @AddMarker.canceled -= instance.OnAddMarker;
            @MoveMarker.started -= instance.OnMoveMarker;
            @MoveMarker.performed -= instance.OnMoveMarker;
            @MoveMarker.canceled -= instance.OnMoveMarker;
        }

        public void RemoveCallbacks(IEditingCurveActions instance)
        {
            if (m_Wrapper.m_EditingCurveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditingCurveActions instance)
        {
            foreach (var item in m_Wrapper.m_EditingCurveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditingCurveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditingCurveActions @EditingCurve => new EditingCurveActions(this);
    public interface IEditingCurveActions
    {
        void OnAddMarker(InputAction.CallbackContext context);
        void OnMoveMarker(InputAction.CallbackContext context);
    }
}
